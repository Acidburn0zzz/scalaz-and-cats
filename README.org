#+TITLE: ScalaZ and Cats
#+AUTHOR: Colin
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/home/colin/code/org-theme.css"/>

ScalaZ and Cats are libraries which provide Functional Programming constructs
for Scala (i.e. ~Monad~ n' friends).

This repository is a comparison of these two libraries by someone who isn't predisposed
to either one. If you're a contributor to either library and notice a discrepancy here,
please let me know!

We seek to answer the following question:

#+BEGIN_QUOTE
Should I use ScalaZ or Cats?
#+END_QUOTE

The answer is, of course, "it depends". What's your use-case?

** Use Cases

*** I want to train my Scala team in Functional Programming fundamentals

Both ScalaZ and Cats have books and professional training available.

ScalaZ:

- [[https://www.manning.com/books/functional-programming-in-scala][Functional Programming in Scala]] by the ScalaZ authors (for Scala beginners)
- [[https://leanpub.com/fpmortals][Functional Programming for Mortals]] by Sam Halliday (for FP beginners - assumes an OO Scala background)
- Training by the [[http://fantasyland.institute/][Fantasyland Institute]]

Cats:

- [[https://underscore.io/books/scala-with-cats/][Scala with Cats]] by Noel Welsh and Dave Gurnell (assumes 1+ years of Scala experience)
- Training by [[https://underscore.io/training/courses/advanced-scala/][Underscore Consultants]]

*** I'm writing a performance-sensitive application

Lean toward Cats, it tends to be faster in aggregate. Are you using a
database? Consider [[https://github.com/tpolecat/doobie][Doobie]], which uses Cats.

*** I want to improve quality-of-life for my Scala devs

Any dedicated application of FP concepts will help you organize and simplify
your code. Libaries like [[https://github.com/mpilquist/simulacrum][simulacrum]], [[https://github.com/bkirwi/decline][decline]] and [[https://github.com/circe/circe][circe]] can provide immediate wins
by drastically cutting down boilerplate. The latter two can be used natively with Cats,
or via ScalaZ with the [[https://github.com/djspiewak/shims][shims]] library.

*** I'm writing a library/application that works with a complex DSL

You probably need Recursion Schemes, which are supplied by the [[https://github.com/slamdata/matryoshka][Matryoshka]]
library in ScalaZ-land.

*** I want to port a well-known, general-purpose Haskell library to Scala

You'd be a champ to write a backend for both ScalaZ and Cats, but
know that Cats has a head start and has a nice set of ported libraries
already.

*** I care about which stays truer to Haskell

ScalaZ does. Its core has a larger API, provides more features up-front,
and tends to keep Haskell function names and operators (e.g. ~<*>~).

*** I care about which has more industry backing

[[https://www.jetbrains.com/research/devecosystem-2017/scala/][According to this survey]], ScalaZ does.

*** I hear the ~IO~ Monad can help me logically organize my code

Both ScalaZ 7 and Cats have a ~effects~ subpackage which provides an
~IO~ type. They both help you contain "real world" side-effects into
smaller areas of your code base, freeing the rest of it to purity
([[https://en.wikipedia.org/wiki/Referential_transparency][referential transparency]]). They also help you wrangle IO-based
Exceptions.

Cats' ~IO~ is currently faster in aggregate. However, an overhaul
of ~scalaz-effects~ with many orders of magnitude of improvement in
performance is promised [[http://degoes.net/articles/scalaz8-is-the-future][for ScalaZ 8]], so you may want to wait
for that if IO is a great concern to you.

*** Futures suck and I hate JVM thread pools. Help?

[[http://degoes.net/articles/scalaz8-is-the-future][Wait for ScalaZ 8.]]

*** Just gimme Monads

Then either is fine, you can flip a coin.

** Benchmarks

Benchmarks were performed using the [[https://github.com/ktoso/sbt-jmh][JMH plugin for SBT]].
Vanilla Scala and Haskell results are also included where applicable.

*** Results

/All times are in nanoseconds. Kittens and scalaz-deriving were used to derive Eq instances./

- ~scalaz-deriving v0.9.1-SNAPSHOT~
- ~kittens 1.0.0-RC1~

| Benchmark                               | ScalaZ 7.2.16 | ScalaZ 7.2.17 | Cats 1.0.0-RC1 | Vanilla Scala | Haskell 8.0.2 |
|-----------------------------------------+---------------+---------------+----------------+---------------+---------------|
| ~Eq~ - same ~[Int]~                     | 78,653        | *11.5*        | 2.5            | 2.4           | 3,974         |
| ~Eq~ - different ~[Int]~                | 80,508        | *5,753*       | 3,983          | 5,180         |               |
| ~Eq~ - ~while~ w/ ~Int~                 | 3,226         | 3,223         | 199            | 198           |               |
| ~Eq~ (derived) - same ~[Foo]~           | 79,150        | *10.2*        | 2.8            | 2.5           |               |
| ~Eq~ (derived) - different ~[Foo]~      | 80,737        | *2,945*       | 38,630         | 2,071         |               |
| ~Eq~ (derived) - ~while~ w/ ~Foo~       | 470,323       | 463,595       | 40,113         | 5,335         |               |
| ~Eq~ (hand-written) - same ~[Foo]~      | 26,673        | *10.1*        | 2.8            | 2.5           |               |
| ~Eq~ (hand-written) - different ~[Foo]~ | 26,638        | *2,962*       | 7,835          | 2,071         |               |
| ~Eq~ (hand-written) - ~while~ w/ ~Foo~  | 10,771        | *3,156*       | 5,341          | 5,335         |               |
| ~Show~ - ~[Int]~                        | 1,000,757     |               | 43,633         | 41,079        | 46,540        |
| ~Show~ - ~String~                       | 216.6         |               | 3.2            | 2.8           | 199.4         |
| ~Foldable.fold~ on ~[Int]~              | 3,355         |               | 5,026          | 7,939         | 3,330         |
| ~Foldable.fold~ on ~[Maybe Int]~        | 10,740        |               | 12,506         |               | 15,440        |
| ~State~ - ~get~                         | 17.9          |               | 33.3           |               | 4.1           |
| ~State~ - ~>>=~                         | 90            |               | 139.1          |               | 10.43         |
| ~State~ - ~flatMap~                     | 63.9          |               | 133.3          |               |               |
| ~State~ - countdown                     | 4,259,320     |               | 2,071,480      |               | 6,069         |
| ~StateT~ - countdown                    |               |               | 4,572,499      |               | 24,070        |
| ~Applicative~ - sum ~(<*>)~             | 31,709        |               | 32,132         |               | 22,140        |
| ~Applicative~ - sum (cartesian)         | 50,431        |               | 33,638         |               |               |
| ~IO~ - recurse 1000                     | 117,569       |               | 48,558         |               | 907.7         |
| ~IO~ - recurse 10000                    | 1,183,352     |               | 503,889        |               | 9,095         |
| ~IO~ - recurse 100000                   | 11,671,581    |               | 5,167,355      |               | 89,860        |

/Note:/ For the ~Eq~ typeclass, at least in these benchmarks, ScalaZ consistently
suffered from a strange JVM deoptimization:

#+BEGIN_QUOTE
Warmup Iteration   1: 8967.747 ns/op

Warmup Iteration   2: 15492.176 ns/op

Warmup Iteration   3: 78857.592 ns/op

Warmup Iteration   4: 78532.147 ns/op

Warmup Iteration   5: 78953.201 ns/op

Iteration   1: 79065.639 ns/op

Iteration   2: 78860.625 ns/op

Iteration   3: 80211.784 ns/op

Iteration   4: 78723.984 ns/op

Iteration   5: 79408.957 ns/op
#+END_QUOTE

This occurred for both the "same list" and "different list" benchmarks. Were it not for
the deoptimization, ~Eq~ would perform at least within the same order of magnitude
as Cats and Vanilla Scala. I have no idea what triggers the deopt.

*** Observations

- *Cats' type-safe equality checking is faster than Vanilla Scala.* So, there seems
  to be no reason not to use Cats' ~===~ in all cases.
- *Cats' type-safe String rendering via Show is as fast as Vanilla toString.* So ~.toString~
  should be avoided.
- At the small scale (i.e. a single ~>>=~), ScalaZ tends to be faster.
- At aggregate scale, Cats tends to be faster.
- Neither library performs well on recursive Monadic operations. Haskell is two to
  three orders of magnitude faster in this regard. In particular, GHC heavily optimizes
  both ~IO~ and ~State~ operations.

*** Caveat

As of this writing (2017 November), ScalaZ 8 is still under development but promises
significant performance improvements for their ~IO~ Monad. The benchmarks above
will have to be reran when it is released.

** The API

*** Accessibility

Up front, Cats has much more documentation and usage examples. Their website is
good for this. However, given that they both have blog posts and books written about
them, overall the availability of resources should be about equal between the
two libraries.

The Cats import story is consistent - for most tasks you only need:

#+BEGIN_SRC scala
  import cats._            /* To refer to top-level symbols like Monad */
  import cats.implicits._  /* To get typeclass instances and operators */
#+END_SRC

ScalaZ has a bit more flexibility with their imports, but honestly you can
just avoid that and do:

#+BEGIN_SRC scala
  import scalaz._
  import Scalaz._
#+END_SRC

and you'll get all data types, typeclasses, instances, and operators.
If you're willing to do that, then the import experience for both libraries
is the same.

*** Features

*** Monads and Monadic Recursion

If you're not careful, Monadic Recursion with ScalaZ can blow the JVM stack.
For instance, the following will "just work" with Cats:

#+BEGIN_SRC scala
  def countdown: State[Int, Int] = State.get.flatMap { n =>
    if (n <= 0) State.pure(n) else State.set(n - 1) *> countdown
  }
#+END_SRC

Which in ScalaZ would blow the stack for ~n~ greater than a few thousand.
The proper ScalaZ equivalent is:

#+BEGIN_SRC scala
  def trampolineCountdown: StateT[Trampoline, Int, Int] = State.get.lift[Trampoline].flatMap{ n =>
    if (n <= 0) StateT(_ => Trampoline.done((n,n)))
    else State.put(n - 1).lift[Trampoline] >> trampolineCountdown
  }
#+END_SRC

~Trampoline~ seems like an implementation detail, but it's exposed to the user here.

A quote from Cats:

#+BEGIN_QUOTE
Because monadic recursion is so common in functional programming but is not stack
safe on the JVM, Cats has chosen to require ~tailRecM~ of all monad
implementations as opposed to just a subset.
#+END_QUOTE

So ~tailRecM~ gets us stack safety - if you can figure out how to implement it
correctly. I tried for ~Tree~ and was not successful.

John de Goes on ScalaZ 8:

#+BEGIN_QUOTE
~tailRecM~ will not be a function on Monad, because not all monads can implement it in constant stack space.
#+END_QUOTE

So ScalaZ chooses lawfulness over convenience in this case.

** Library Health and Ecosystems

*** Project Pulses

As of 2017 November 6.

| Project | Releases | Watchers | Stars | Forks | Commits | Prev. Month Commits | ScalaJS | Scala Native |
|---------+----------+----------+-------+-------+---------+---------------------+---------+--------------|
| ScalaZ  |      106 |      257 |  3312 |   534 |    6101 |                  45 | Yes     | Yes          |
| Cats    |       22 |      174 |  2118 |   493 |    3280 |                  51 | Yes     | *No*         |

ScalaZ's numbers are higher, but that's to be expected as it's an older project.
Otherwise the projects seem to be about equally active.
Notably missing is the lack of Scala Native support in Cats.

*** Sub-libraries

The diagram below looks one-sided, but must be taken with a grain of salt. As projects,
Cats and ScalaZ have different aims. Cats has a small, tight core and espouses modularity.
ScalaZ frames itself as a batteries-included standard library for FP in Scala. ScalaZ
certainly has a larger and more featureful API than Cats at current. This will
be increasingly true for the up-coming ScalaZ 8, which aims to provide the equivalent
functionality of Dogs, Monocle, and Matryoshka directly. It also plans to provide
low-level concurrency primitives which see no analogue in Cats or Vanilla Scala.

That in mind, here is a simplified view of their library ecosystems:

[[./ecosystem.png]]

/Notes:/

- Origami is a port of Haskell's [[https://hackage.haskell.org/package/foldl][foldl]] library
- Atto is a port of Haskell's [[https://hackage.haskell.org/package/attoparsec][attoparsec]] library
- Decline is a port of Haskell's [[https://hackage.haskell.org/package/optparse-applicative][optparse-applicative]] library
- Refined is a port of Haskell's [[https://hackage.haskell.org/package/refined][refined]] library
- Monocle is a port of Haskell's [[https://hackage.haskell.org/package/lens][lens]] library

**** Shims

Libraries like ~circe~, ~atto~ and ~decline~ are immense standard-of-living
improvements for Scala developers. Luckily, the [[https://github.com/djspiewak/shims][shims library]] allows us
to use them via ScalaZ, too. Likewise, Matryoshka becomes usable
via Cats. From the ~shims~ project:

#+BEGIN_QUOTE
Shims aims to provide a convenient, bidirectional, and transparent set of conversions
between scalaz and cats, covering typeclasses (e.g. ~Monad~) and data types (e.g. ~\/~).
By that I mean, with shims, anything that has a ~cats.Functor~ instance also has a ~scalaz.Functor~
instance, and vice versa.
#+END_QUOTE

[[https://github.com/fosskers/shimmy][Here is a working example:]]

#+BEGIN_SRC scala
  package shimmy

  import scalaz._
  import Scalaz._
  import shims._
  import com.monovore.decline._  /* Depends on Cats */

  object Shimmy extends CommandApp(
    name = "shimmy",
    header = "Demonstrate how shims works.",
    main = {
      /* These are `decline` data types with `Applicative` instances from Cats */
      val foo = Opts.option[String]("foo", help = "Foo")
      val bar = Opts.option[Int]("bar", help = "Bar")
      val baz = Opts.flag("baz", help = "Baz").orFalse

      /* These are ScalaZ operators that use ScalaZ's `Applicative` */
      (foo |@| bar |@| baz) { (_, _, _) => println("It worked!") }
    }
  )
#+END_SRC

*** Resources

The tendency is for Cats to have better documentation and examples up-front, while
ScalaZ has an extensive ~examples~ subpackage.

**** ScalaZ

- [[https://leanpub.com/fpmortals][Functional Programming for Mortals]] by Sam Halliday (book)
- [[http://eed3si9n.com/learning-scalaz/index.html][Learning ScalaZ]] by Eugene Yokota (blog series)
- [[http://eed3si9n.com/scalaz-cheat-sheet][Cheatsheet]] (typeclass usage and imports)
- [[https://github.com/scalaz/scalaz][ScalaZ README]]
- [[https://scalaz.github.io/scalaz/#scaladoc][Scaladocs]]
- [[https://gitter.im/scalaz/scalaz][ScalaZ Gitter]]

**** Cats

- [[https://typelevel.org/cats/][Cats Website]]
- [[https://underscore.io/books/scala-with-cats/][Scala with Cats]] by Noel Walsh and Dave Gurnell (book)
- [[https://typelevel.org/cats/api/][Scaladocs]]
- [[http://eed3si9n.com/herding-cats/][Herding Cats]] by Eugene Yokota (blog series)
- [[https://gitter.im/typelevel/cats][Cats Gitter]]
